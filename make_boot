#!/bin/bash
#########################################


#########################################
# Variables
#########################################
#
#'set -u' will exit your script if you try to use an uninitialised variable. 
set -u
export LANG=C

prog="$(basename $0)"
target_part=${1:-}

[ -z ${SETCOLOR_SUCCESS:-''} ] && SETCOLOR_SUCCESS="echo -en \\033[1;32m"
[ -z ${SETCOLOR_FAILURE:-''} ] && SETCOLOR_FAILURE="echo -en \\033[1;31m"
[ -z ${SETCOLOR_WARNING:-''} ] && SETCOLOR_WARNING="echo -en \\033[1;33m"
[ -z ${SETCOLOR_NORMAL:-''}  ] && SETCOLOR_NORMAL="echo -en \\033[0;39m"
BOOTUP="color"

#########################################
# Functions
#########################################
#

ERROR() {
    echo -en "\\033[1;31m"
    echo "ERROR: $1"
    echo -en "\\033[1;39m"
    exit 1
}

WARNING() {
    echo -en "\\033[1;33m"
    echo "$1"
}

SUCCESS() {
    echo -en "\\033[1;32m"
    echo "$1"
}

INFO() {
    echo -en "\\033[1;39m"
    echo "$1"
}

USAGE() {
   echo "To make the device bootable with syslinux"
   echo "Usage: $prog <partition_device>"
   echo "Note:"
   echo "  Device assignment priority: Partition name > UUID > LABEL (if not only one NAME-TYPE is assigned)"
   echo "Example: $prog /dev/sdg1" 
   echo "To make \"/dev/sdg1\" bootable on GNU/Linux:"
}

check_if_exist() {
    if ! type $1 &>/dev/null; then
      ERROR "Program '$1' was not found on this GNU/Linux system. Please install it."
    fi
}

get_diskname() {
  local disk=${1#/dev/*}

  if [ -n "$disk" ]; then
    echo "$disk" | sed -e 's/^\([^0-9]*\)[0-9]*$/\1/g' \
                       -e 's/^\(.*[0-9]\{1,\}\)p[0-9]\{1,\}$/\1/g'
  fi
} # end of get_diskname
#
get_part_number() {
  local disk=${1#/dev/*}
  local num=""

  if [ -n "$disk" ]; then
    num=$(echo "$disk" | sed -e 's/^[^0-9]*\([0-9]*\)$/\1/g' \
                             -e 's/^.*[0-9]\{1,\}\(p[0-9]\{1,\}\)$/\1/g')
  fi

  echo $num
} # end of get_part_number

#
#########################################
# Main
#########################################
#
check_if_exist syslinux
check_if_exist parted

# Check if device is defined in parameter
if [ -z "$target_part" ]
then
  USAGE
  ERROR "No target partition could be determined"
fi
# Make sure target_part is partition device name, not disk device name
if [ -z "$(echo $target_part | grep -iE "/dev/[hsu][bd][a-z]+[[:digit:]]+")" ]; then
  ERROR "'$target_part' is NOT a valid partition name"
fi

pt_dev="$(basename $target_part)"  # e.g. sdc1
hd_dev="$(get_diskname $target_part)"   # e.g. sdc
target_disk="/dev/$hd_dev"  # e.g. /dev/sdc
pt_dev_no="$(get_part_number $target_part)"  # e.g. 1

# If the destination disk is not MBR partition table (e.g. it's GPT), exit. This program only works for MBR disk.
if [ -z "$(LC_ALL=C sudo parted -s $target_disk print | grep -iE "^Partition Table:" | grep -iE "msdos")" ]; then
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo "The partition table of $target_disk is not for MBR (Master Boot Record). Its layout is:"
  LC_ALL=C sudo parted -s $target_disk print
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo "This program is for making a bootable disk with MBR partition table."
  echo "For GPT disk, there is no need to run this program. Just make sure the partition is FAT32 with ID=ef00 and all the files are copied on that. That's all."
  exit 1
fi

if ! grep -qEw $pt_dev /proc/partitions; then
  ERROR "$target_part was NOT found in /proc/partitions"
fi

echo "This command will install MBR and syslinux bootloader on $target_disk"
echo "--------------------------------------------"
sudo parted -s $target_disk print
echo "--------------------------------------------"
echo "Create file system"
sudo mkfs.vfat -F32 -n BLEUE $target_part

echo "--------------------------------------------"
# 2. Make target bootable
echo "Make $target_part bootable"
device_no="$(get_part_number $target_part)"  # e.g. 1
#echo "Running: sudo parted -s $target_disk set $device_no boot on"
sudo parted -s $target_disk set $device_no boot on
if [ "$?" -ne 0 ]; then
  ERROR "Failed to make partition $device_no of $target_disk bootable"
fi

# 3. Install MBR
echo "--------------------------------------------"
echo "Install Master Boot Record on $target_disk"
sudo dd if=/usr/lib/syslinux/mbr/mbr.bin of=$target_disk
if [ "$?" -ne 0 ]; then
  ERROR "Failed to write bootloader into MBR of $target_disk"
fi

# 4. Install Linux system
echo "--------------------------------------------"
mount_point="/mnt"
sudo mount $target_part $mount_point
echo "Copying system files to $target_part"
sudo cp vmlinuz      $mount_point/
sudo cp initrd.img   $mount_point/
sudo cp syslinux.cfg $mount_point/
echo "Running: syslinux --install \"$target_part\""
sudo syslinux --install "$target_part"
echo "--------------------------------------------"
echo "Mounted point of $target_part is $mount_point"
ls -lh $mount_point
sudo umount $target_part
